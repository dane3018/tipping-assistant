

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";





SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."games" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "ascore" smallint DEFAULT '0'::smallint NOT NULL,
    "hscore" smallint DEFAULT '0'::smallint NOT NULL,
    "agoals" smallint,
    "abehinds" smallint,
    "hgoals" smallint,
    "hbehinds" smallint,
    "hteamid" smallint DEFAULT '-1'::smallint NOT NULL,
    "ateamid" smallint DEFAULT '-1'::smallint NOT NULL,
    "round" smallint DEFAULT '-1'::smallint NOT NULL,
    "complete" smallint DEFAULT '0'::smallint NOT NULL,
    "year" smallint DEFAULT '-1'::smallint NOT NULL,
    "winnerteamid" smallint,
    "localtime" timestamp without time zone NOT NULL,
    "venue" "text" NOT NULL,
    "is_final" smallint DEFAULT '0'::smallint NOT NULL,
    "is_grand_final" smallint DEFAULT '0'::smallint NOT NULL,
    "date" timestamp without time zone
);


ALTER TABLE "public"."games" OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."get_focused_h2h"("gameid" integer) RETURNS SETOF "public"."games"
    LANGUAGE "plpgsql"
    AS $$
DECLARE
    fetched_hteamid INTEGER;
    fetched_ateamid INTEGER;
    fetched_date DATE;
BEGIN
    -- Fetch hteamid and ateamid for the given gameid
    SELECT hteamid, ateamid, date
    INTO fetched_hteamid, fetched_ateamid, fetched_date
    FROM games
    WHERE id = gameid;

    -- Now return the focused H2H records
    RETURN QUERY
    SELECT *
    FROM games
    WHERE (hteamid = fetched_hteamid OR hteamid = fetched_ateamid)
      AND (ateamid = fetched_ateamid OR ateamid = fetched_hteamid)
      AND complete = 100
      AND fetched_date > date
    ORDER BY date ASC;
END
$$;


ALTER FUNCTION "public"."get_focused_h2h"("gameid" integer) OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."get_focused_venue_h2h"("teamid" integer, "limit_arg" integer, "venue_arg" "text") RETURNS SETOF "public"."games"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
    RETURN QUERY
    SELECT *
    FROM games
    WHERE venue = venue_arg 
      AND (
            hteamid = teamid OR ateamid = teamid
          )
      AND complete = 100
    ORDER BY date DESC
    LIMIT limit_arg;
END;
$$;


ALTER FUNCTION "public"."get_focused_venue_h2h"("teamid" integer, "limit_arg" integer, "venue_arg" "text") OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."get_games_by_teams"("hteamid_arg" integer, "ateamid_arg" integer) RETURNS TABLE("id" integer, "hteamid" integer, "ateamid" integer, "date" "date", "winnerteamid" integer)
    LANGUAGE "plpgsql"
    AS $$
BEGIN
    RETURN QUERY
    SELECT (id, hteamid, ateamid, date, winnerteamid)
    FROM games
    WHERE hteamid = hteamid_arg AND ateamid = ateamid_arg;
END;
$$;


ALTER FUNCTION "public"."get_games_by_teams"("hteamid_arg" integer, "ateamid_arg" integer) OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."getfocusedh2h"("hteamid_arg" integer, "ateamid_arg" integer) RETURNS SETOF "public"."games"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
    RETURN QUERY
    SELECT *
    FROM games
    WHERE (hteamid = hteamid_arg or hteamid = ateamid_arg) AND (ateamid = ateamid_arg or ateamid = hteamid_arg);
END;
$$;


ALTER FUNCTION "public"."getfocusedh2h"("hteamid_arg" integer, "ateamid_arg" integer) OWNER TO "postgres";


ALTER TABLE "public"."games" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."games_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."models" (
    "gameid" bigint NOT NULL,
    "sourceid" smallint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "hteamid" smallint NOT NULL,
    "ateamid" smallint NOT NULL,
    "tipteamid" smallint NOT NULL,
    "round" smallint NOT NULL,
    "confidence" real,
    "err" real,
    "source" "text"
);


ALTER TABLE "public"."models" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."settings" (
    "id" "text" NOT NULL,
    "value" "text" NOT NULL,
    "updated" timestamp with time zone DEFAULT "now"() NOT NULL
);


ALTER TABLE "public"."settings" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."teams" (
    "id" smallint NOT NULL,
    "name" "text" NOT NULL,
    "abbrev" "text" NOT NULL,
    "logo" "text",
    "debut" smallint,
    "retirement" smallint DEFAULT '9999'::smallint
);


ALTER TABLE "public"."teams" OWNER TO "postgres";


ALTER TABLE "public"."teams" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."teams_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE ONLY "public"."games"
    ADD CONSTRAINT "games_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."models"
    ADD CONSTRAINT "models_pkey" PRIMARY KEY ("gameid", "sourceid");



ALTER TABLE ONLY "public"."settings"
    ADD CONSTRAINT "settings_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."teams"
    ADD CONSTRAINT "teams_abbrev_key" UNIQUE ("abbrev");



ALTER TABLE ONLY "public"."teams"
    ADD CONSTRAINT "teams_name_key" UNIQUE ("name");



ALTER TABLE ONLY "public"."teams"
    ADD CONSTRAINT "teams_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."games"
    ADD CONSTRAINT "games_ateamid_fkey" FOREIGN KEY ("ateamid") REFERENCES "public"."teams"("id");



ALTER TABLE ONLY "public"."games"
    ADD CONSTRAINT "games_hteamid_fkey" FOREIGN KEY ("hteamid") REFERENCES "public"."teams"("id");



ALTER TABLE ONLY "public"."games"
    ADD CONSTRAINT "games_winnerteamid_fkey" FOREIGN KEY ("winnerteamid") REFERENCES "public"."teams"("id");



ALTER TABLE ONLY "public"."models"
    ADD CONSTRAINT "models_ateamid_fkey" FOREIGN KEY ("ateamid") REFERENCES "public"."teams"("id");



ALTER TABLE ONLY "public"."models"
    ADD CONSTRAINT "models_gameid_fkey" FOREIGN KEY ("gameid") REFERENCES "public"."games"("id");



ALTER TABLE ONLY "public"."models"
    ADD CONSTRAINT "models_hteamid_fkey" FOREIGN KEY ("hteamid") REFERENCES "public"."teams"("id");



ALTER TABLE ONLY "public"."models"
    ADD CONSTRAINT "models_tipteamid_fkey" FOREIGN KEY ("tipteamid") REFERENCES "public"."teams"("id");



CREATE POLICY "Enable insert for authenticated users only" ON "public"."games" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable read access for all users" ON "public"."games" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "public"."teams" FOR SELECT USING (true);



ALTER TABLE "public"."models" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."teams" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";











































































































































































GRANT ALL ON TABLE "public"."games" TO "anon";
GRANT ALL ON TABLE "public"."games" TO "authenticated";
GRANT ALL ON TABLE "public"."games" TO "service_role";



GRANT ALL ON FUNCTION "public"."get_focused_h2h"("gameid" integer) TO "anon";
GRANT ALL ON FUNCTION "public"."get_focused_h2h"("gameid" integer) TO "authenticated";
GRANT ALL ON FUNCTION "public"."get_focused_h2h"("gameid" integer) TO "service_role";



GRANT ALL ON FUNCTION "public"."get_focused_venue_h2h"("teamid" integer, "limit_arg" integer, "venue_arg" "text") TO "anon";
GRANT ALL ON FUNCTION "public"."get_focused_venue_h2h"("teamid" integer, "limit_arg" integer, "venue_arg" "text") TO "authenticated";
GRANT ALL ON FUNCTION "public"."get_focused_venue_h2h"("teamid" integer, "limit_arg" integer, "venue_arg" "text") TO "service_role";



GRANT ALL ON FUNCTION "public"."get_games_by_teams"("hteamid_arg" integer, "ateamid_arg" integer) TO "anon";
GRANT ALL ON FUNCTION "public"."get_games_by_teams"("hteamid_arg" integer, "ateamid_arg" integer) TO "authenticated";
GRANT ALL ON FUNCTION "public"."get_games_by_teams"("hteamid_arg" integer, "ateamid_arg" integer) TO "service_role";



GRANT ALL ON FUNCTION "public"."getfocusedh2h"("hteamid_arg" integer, "ateamid_arg" integer) TO "anon";
GRANT ALL ON FUNCTION "public"."getfocusedh2h"("hteamid_arg" integer, "ateamid_arg" integer) TO "authenticated";
GRANT ALL ON FUNCTION "public"."getfocusedh2h"("hteamid_arg" integer, "ateamid_arg" integer) TO "service_role";


















GRANT ALL ON SEQUENCE "public"."games_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."games_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."games_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."models" TO "anon";
GRANT ALL ON TABLE "public"."models" TO "authenticated";
GRANT ALL ON TABLE "public"."models" TO "service_role";



GRANT ALL ON TABLE "public"."settings" TO "anon";
GRANT ALL ON TABLE "public"."settings" TO "authenticated";
GRANT ALL ON TABLE "public"."settings" TO "service_role";



GRANT ALL ON TABLE "public"."teams" TO "anon";
GRANT ALL ON TABLE "public"."teams" TO "authenticated";
GRANT ALL ON TABLE "public"."teams" TO "service_role";



GRANT ALL ON SEQUENCE "public"."teams_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."teams_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."teams_id_seq" TO "service_role";









ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";






























RESET ALL;
